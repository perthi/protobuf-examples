/* Automatically generated nanopb header */
/* Generated by nanopb-0.3.9-dev at Thu Dec  5 12:56:25 2019. */

#ifndef PB_KF_PB_H_INCLUDED
#define PB_KF_PB_H_INCLUDED
#include <pb.h>

/* @@protoc_insertion_point(includes) */
#if PB_PROTO_HEADER_VERSION != 30
#error Regenerate this file with the current version of nanopb generator.
#endif

#ifdef __cplusplus
extern "C" {
#endif

/* Struct definitions */
typedef struct _SEMConfigSEM {
    pb_callback_t name;
    bool has_enable_wifi;
    int32_t enable_wifi;
    pb_callback_t ethernet_address;
    pb_callback_t ethernet_mask;
    pb_callback_t ethernet_default_gateway;
    pb_callback_t dnsServerAddress;
/* @@protoc_insertion_point(struct:SEMConfigSEM) */
} SEMConfigSEM;

typedef struct _SEMConfigSensorBool {
    bool has_signal_type;
    int32_t signal_type;
    bool has_active_high;
    bool active_high;
    bool has_alarm;
    bool alarm;
    bool has_device_id_aux;
    char device_id_aux[32];
/* @@protoc_insertion_point(struct:SEMConfigSensorBool) */
} SEMConfigSensorBool;

typedef struct _SEMConfigSolenoid {
    bool has_max_current;
    float max_current;
    bool has_activate_current;
    float activate_current;
    bool has_hold_current;
    float hold_current;
/* @@protoc_insertion_point(struct:SEMConfigSolenoid) */
} SEMConfigSolenoid;

typedef struct _SEMConfigVirtualXYMotors {
    char device_id_x[32];
    char device_id_y[32];
/* @@protoc_insertion_point(struct:SEMConfigVirtualXYMotors) */
} SEMConfigVirtualXYMotors;

typedef struct _SEMCrc {
    int32_t crc;
/* @@protoc_insertion_point(struct:SEMCrc) */
} SEMCrc;

typedef struct _SEMDeviceAddress {
    char device_id[32];
    bool has_device_name;
    char device_name[32];
    int32_t card_id;
    int32_t device_port_no;
    bool has_device_type;
    int32_t device_type;
/* @@protoc_insertion_point(struct:SEMDeviceAddress) */
} SEMDeviceAddress;

typedef struct _SEMLinearUnitConversion {
    int32_t input_type;
    float min_input;
    float max_input;
    float min_output;
    float max_output;
/* @@protoc_insertion_point(struct:SEMLinearUnitConversion) */
} SEMLinearUnitConversion;

typedef struct _SEMMessageCommandStatusReply {
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageCommandStatusReply) */
} SEMMessageCommandStatusReply;

typedef struct _SEMMessageConfigurationStatusReply {
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageConfigurationStatusReply) */
} SEMMessageConfigurationStatusReply;

typedef struct _SEMMessageMotor {
    int32_t state;
    float value_position;
    bool has_value_speed;
    float value_speed;
    bool has_end_stop_reached;
    bool end_stop_reached;
    bool has_home_position_reached;
    bool home_position_reached;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageMotor) */
} SEMMessageMotor;

typedef struct _SEMMessageSensor {
    int32_t state;
    float value_converted;
    bool has_value_raw;
    int32_t value_raw;
    int32_t alarm_status;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageSensor) */
} SEMMessageSensor;

typedef struct _SEMMessageSensorBool {
    int32_t state;
    int32_t value_converted;
    bool has_value_raw;
    int32_t value_raw;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageSensorBool) */
} SEMMessageSensorBool;

typedef struct _SEMMessageSolenoid {
    int32_t state;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageSolenoid) */
} SEMMessageSolenoid;

typedef struct _SEMMessageStatus {
    int32_t state;
    bool has_configuration_crc;
    int32_t configuration_crc;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageStatus) */
} SEMMessageStatus;

typedef struct _SEMMessageXYMotor {
    int32_t state;
    float value_x_position;
    float value_y_position;
    bool has_error_code;
    int32_t error_code;
    bool has_error_string;
    char error_string[32];
/* @@protoc_insertion_point(struct:SEMMessageXYMotor) */
} SEMMessageXYMotor;

typedef struct _SEMStepUnitConversion {
    int32_t si_unit;
    float unit_per_step;
/* @@protoc_insertion_point(struct:SEMStepUnitConversion) */
} SEMStepUnitConversion;

typedef struct _SEMThresholds {
    bool has_alarm_low;
    float alarm_low;
    bool has_warning_low;
    float warning_low;
    bool has_warning_high;
    float warning_high;
    bool has_alarm_high;
    float alarm_high;
/* @@protoc_insertion_point(struct:SEMThresholds) */
} SEMThresholds;

typedef struct _SEMValue {
    float f_val;
/* @@protoc_insertion_point(struct:SEMValue) */
} SEMValue;

typedef struct _SEMXYValue {
    float x;
    float y;
/* @@protoc_insertion_point(struct:SEMXYValue) */
} SEMXYValue;

typedef struct _SEMCommand {
    char device_id[32];
    int32_t cmd_id;
    pb_size_t which_payload;
    union {
        SEMValue val;
        SEMXYValue xy;
    } payload;
/* @@protoc_insertion_point(struct:SEMCommand) */
} SEMCommand;

typedef struct _SEMConfigPWM {
    SEMLinearUnitConversion conversion;
    bool has_min_level;
    float min_level;
    bool has_max_level;
    float max_level;
/* @@protoc_insertion_point(struct:SEMConfigPWM) */
} SEMConfigPWM;

typedef struct _SEMConfigSensorAnalog {
    bool has_conversion;
    SEMLinearUnitConversion conversion;
    bool has_thresholds;
    SEMThresholds thresholds;
    bool has_input_type;
    int32_t input_type;
    bool has_device_id_aux;
    char device_id_aux[32];
/* @@protoc_insertion_point(struct:SEMConfigSensorAnalog) */
} SEMConfigSensorAnalog;

typedef struct _SEMConfigStepperMotor {
    SEMStepUnitConversion conversion;
    int32_t direction_positive;
    bool has_negative_soft_endstop;
    float negative_soft_endstop;
    bool has_positive_soft_endstop;
    float positive_soft_endstop;
    bool has_max_speed;
    float max_speed;
    bool has_speed;
    float speed;
    bool has_max_acceleration;
    float max_acceleration;
    bool has_acceleration;
    float acceleration;
    bool has_max_current;
    float max_current;
    bool has_current;
    float current;
    bool has_inactive_timeout;
    float inactive_timeout;
    bool has_inactive_current;
    float inactive_current;
    bool has_home_value;
    float home_value;
    bool has_home_device_id;
    char home_device_id[32];
    bool has_direction_home;
    int32_t direction_home;
    bool has_negative_soft_endstop_id;
    char negative_soft_endstop_id[32];
    bool has_positive_soft_endstop_id;
    char positive_soft_endstop_id[32];
/* @@protoc_insertion_point(struct:SEMConfigStepperMotor) */
} SEMConfigStepperMotor;

typedef struct _SEMMessage {
    char device_id[32];
    pb_size_t which_payload;
    union {
        SEMMessageStatus sem_status;
        SEMMessageSensor sensor_status;
        SEMMessageSensorBool bool_sensor_status;
        SEMMessageMotor motor_status;
        SEMMessageSolenoid solenoid_status;
        SEMMessageXYMotor xy_motor_status;
        SEMMessageConfigurationStatusReply configuration_reply;
        SEMMessageCommandStatusReply command_reply;
    } payload;
/* @@protoc_insertion_point(struct:SEMMessage) */
} SEMMessage;

typedef struct _SEMConfig {
    SEMDeviceAddress address;
    pb_size_t which_device;
    union {
        SEMConfigSEM sem;
        SEMConfigStepperMotor motor_stepper;
        SEMConfigVirtualXYMotors motor_xy;
        SEMConfigSolenoid solenoid;
        SEMConfigPWM pwm;
        SEMConfigSensorAnalog sensor_analog;
        SEMConfigSensorBool sensor_bool;
    } device;
/* @@protoc_insertion_point(struct:SEMConfig) */
} SEMConfig;

typedef struct _SEMOneOfMessage {
    int32_t sequence_id;
    pb_size_t which_payload;
    union {
        SEMConfig sem_config;
        SEMCommand sem_command;
        SEMMessage sem_message;
    } payload;
/* @@protoc_insertion_point(struct:SEMOneOfMessage) */
} SEMOneOfMessage;

/* Default values for struct fields */

/* Initializer values for message structs */
#define SEMValue_init_default                    {0}
#define SEMXYValue_init_default                  {0, 0}
#define SEMCrc_init_default                      {0}
#define SEMCommand_init_default                  {"", 0, 0, {SEMValue_init_default}}
#define SEMMessageStatus_init_default            {0, false, 0, false, 0, false, ""}
#define SEMMessageSensor_init_default            {0, 0, false, 0, 0, false, 0, false, ""}
#define SEMMessageSensorBool_init_default        {0, 0, false, 0, false, 0, false, ""}
#define SEMMessageMotor_init_default             {0, 0, false, 0, false, 0, false, 0, false, 0, false, ""}
#define SEMMessageSolenoid_init_default          {0, false, 0, false, ""}
#define SEMMessageXYMotor_init_default           {0, 0, 0, false, 0, false, ""}
#define SEMMessageConfigurationStatusReply_init_default {false, 0, false, ""}
#define SEMMessageCommandStatusReply_init_default {false, 0, false, ""}
#define SEMMessage_init_default                  {"", 0, {SEMMessageStatus_init_default}}
#define SEMConfig_init_default                   {SEMDeviceAddress_init_default, 0, {SEMConfigSEM_init_default}}
#define SEMDeviceAddress_init_default            {"", false, "", 0, 0, false, 0}
#define SEMStepUnitConversion_init_default       {0, 0}
#define SEMLinearUnitConversion_init_default     {0, 0, 0, 0, 0}
#define SEMThresholds_init_default               {false, 0, false, 0, false, 0, false, 0}
#define SEMConfigSEM_init_default                {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SEMConfigStepperMotor_init_default       {SEMStepUnitConversion_init_default, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, "", false, ""}
#define SEMConfigVirtualXYMotors_init_default    {"", ""}
#define SEMConfigSolenoid_init_default           {false, 0, false, 0, false, 0}
#define SEMConfigPWM_init_default                {SEMLinearUnitConversion_init_default, false, 0, false, 0}
#define SEMConfigSensorAnalog_init_default       {false, SEMLinearUnitConversion_init_default, false, SEMThresholds_init_default, false, 0, false, ""}
#define SEMConfigSensorBool_init_default         {false, 0, false, 0, false, 0, false, ""}
#define SEMOneOfMessage_init_default             {0, 0, {SEMConfig_init_default}}
#define SEMValue_init_zero                       {0}
#define SEMXYValue_init_zero                     {0, 0}
#define SEMCrc_init_zero                         {0}
#define SEMCommand_init_zero                     {"", 0, 0, {SEMValue_init_zero}}
#define SEMMessageStatus_init_zero               {0, false, 0, false, 0, false, ""}
#define SEMMessageSensor_init_zero               {0, 0, false, 0, 0, false, 0, false, ""}
#define SEMMessageSensorBool_init_zero           {0, 0, false, 0, false, 0, false, ""}
#define SEMMessageMotor_init_zero                {0, 0, false, 0, false, 0, false, 0, false, 0, false, ""}
#define SEMMessageSolenoid_init_zero             {0, false, 0, false, ""}
#define SEMMessageXYMotor_init_zero              {0, 0, 0, false, 0, false, ""}
#define SEMMessageConfigurationStatusReply_init_zero {false, 0, false, ""}
#define SEMMessageCommandStatusReply_init_zero   {false, 0, false, ""}
#define SEMMessage_init_zero                     {"", 0, {SEMMessageStatus_init_zero}}
#define SEMConfig_init_zero                      {SEMDeviceAddress_init_zero, 0, {SEMConfigSEM_init_zero}}
#define SEMDeviceAddress_init_zero               {"", false, "", 0, 0, false, 0}
#define SEMStepUnitConversion_init_zero          {0, 0}
#define SEMLinearUnitConversion_init_zero        {0, 0, 0, 0, 0}
#define SEMThresholds_init_zero                  {false, 0, false, 0, false, 0, false, 0}
#define SEMConfigSEM_init_zero                   {{{NULL}, NULL}, false, 0, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}, {{NULL}, NULL}}
#define SEMConfigStepperMotor_init_zero          {SEMStepUnitConversion_init_zero, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, 0, false, "", false, 0, false, "", false, ""}
#define SEMConfigVirtualXYMotors_init_zero       {"", ""}
#define SEMConfigSolenoid_init_zero              {false, 0, false, 0, false, 0}
#define SEMConfigPWM_init_zero                   {SEMLinearUnitConversion_init_zero, false, 0, false, 0}
#define SEMConfigSensorAnalog_init_zero          {false, SEMLinearUnitConversion_init_zero, false, SEMThresholds_init_zero, false, 0, false, ""}
#define SEMConfigSensorBool_init_zero            {false, 0, false, 0, false, 0, false, ""}
#define SEMOneOfMessage_init_zero                {0, 0, {SEMConfig_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define SEMConfigSEM_name_tag                    1
#define SEMConfigSEM_enable_wifi_tag             2
#define SEMConfigSEM_ethernet_address_tag        3
#define SEMConfigSEM_ethernet_mask_tag           4
#define SEMConfigSEM_ethernet_default_gateway_tag 5
#define SEMConfigSEM_dnsServerAddress_tag        6
#define SEMConfigSensorBool_signal_type_tag      1
#define SEMConfigSensorBool_active_high_tag      2
#define SEMConfigSensorBool_alarm_tag            3
#define SEMConfigSensorBool_device_id_aux_tag    4
#define SEMConfigSolenoid_max_current_tag        1
#define SEMConfigSolenoid_activate_current_tag   2
#define SEMConfigSolenoid_hold_current_tag       3
#define SEMConfigVirtualXYMotors_device_id_x_tag 1
#define SEMConfigVirtualXYMotors_device_id_y_tag 2
#define SEMCrc_crc_tag                           1
#define SEMDeviceAddress_device_id_tag           1
#define SEMDeviceAddress_device_name_tag         2
#define SEMDeviceAddress_card_id_tag             3
#define SEMDeviceAddress_device_port_no_tag      4
#define SEMDeviceAddress_device_type_tag         5
#define SEMLinearUnitConversion_input_type_tag   1
#define SEMLinearUnitConversion_min_input_tag    2
#define SEMLinearUnitConversion_max_input_tag    3
#define SEMLinearUnitConversion_min_output_tag   4
#define SEMLinearUnitConversion_max_output_tag   5
#define SEMMessageCommandStatusReply_error_code_tag 5
#define SEMMessageCommandStatusReply_error_string_tag 6
#define SEMMessageConfigurationStatusReply_error_code_tag 2
#define SEMMessageConfigurationStatusReply_error_string_tag 3
#define SEMMessageMotor_state_tag                1
#define SEMMessageMotor_value_position_tag       2
#define SEMMessageMotor_value_speed_tag          3
#define SEMMessageMotor_end_stop_reached_tag     4
#define SEMMessageMotor_home_position_reached_tag 5
#define SEMMessageMotor_error_code_tag           6
#define SEMMessageMotor_error_string_tag         7
#define SEMMessageSensor_state_tag               1
#define SEMMessageSensor_value_converted_tag     2
#define SEMMessageSensor_value_raw_tag           3
#define SEMMessageSensor_alarm_status_tag        4
#define SEMMessageSensor_error_code_tag          5
#define SEMMessageSensor_error_string_tag        6
#define SEMMessageSensorBool_state_tag           1
#define SEMMessageSensorBool_value_converted_tag 2
#define SEMMessageSensorBool_value_raw_tag       3
#define SEMMessageSensorBool_error_code_tag      5
#define SEMMessageSensorBool_error_string_tag    6
#define SEMMessageSolenoid_state_tag             1
#define SEMMessageSolenoid_error_code_tag        2
#define SEMMessageSolenoid_error_string_tag      3
#define SEMMessageStatus_state_tag               1
#define SEMMessageStatus_configuration_crc_tag   2
#define SEMMessageStatus_error_code_tag          3
#define SEMMessageStatus_error_string_tag        4
#define SEMMessageXYMotor_state_tag              1
#define SEMMessageXYMotor_value_x_position_tag   2
#define SEMMessageXYMotor_value_y_position_tag   3
#define SEMMessageXYMotor_error_code_tag         4
#define SEMMessageXYMotor_error_string_tag       5
#define SEMStepUnitConversion_si_unit_tag        1
#define SEMStepUnitConversion_unit_per_step_tag  2
#define SEMThresholds_alarm_low_tag              1
#define SEMThresholds_warning_low_tag            2
#define SEMThresholds_warning_high_tag           3
#define SEMThresholds_alarm_high_tag             4
#define SEMValue_f_val_tag                       1
#define SEMXYValue_x_tag                         1
#define SEMXYValue_y_tag                         2
#define SEMCommand_val_tag                       4
#define SEMCommand_xy_tag                        5
#define SEMCommand_device_id_tag                 1
#define SEMCommand_cmd_id_tag                    2
#define SEMConfigPWM_conversion_tag              1
#define SEMConfigPWM_min_level_tag               3
#define SEMConfigPWM_max_level_tag               4
#define SEMConfigSensorAnalog_conversion_tag     1
#define SEMConfigSensorAnalog_thresholds_tag     2
#define SEMConfigSensorAnalog_input_type_tag     3
#define SEMConfigSensorAnalog_device_id_aux_tag  4
#define SEMConfigStepperMotor_conversion_tag     1
#define SEMConfigStepperMotor_direction_positive_tag 2
#define SEMConfigStepperMotor_negative_soft_endstop_tag 3
#define SEMConfigStepperMotor_positive_soft_endstop_tag 4
#define SEMConfigStepperMotor_max_speed_tag      5
#define SEMConfigStepperMotor_speed_tag          6
#define SEMConfigStepperMotor_max_acceleration_tag 7
#define SEMConfigStepperMotor_acceleration_tag   8
#define SEMConfigStepperMotor_max_current_tag    9
#define SEMConfigStepperMotor_current_tag        10
#define SEMConfigStepperMotor_inactive_timeout_tag 11
#define SEMConfigStepperMotor_inactive_current_tag 12
#define SEMConfigStepperMotor_home_value_tag     13
#define SEMConfigStepperMotor_home_device_id_tag 14
#define SEMConfigStepperMotor_direction_home_tag 15
#define SEMConfigStepperMotor_negative_soft_endstop_id_tag 16
#define SEMConfigStepperMotor_positive_soft_endstop_id_tag 17
#define SEMMessage_sem_status_tag                3
#define SEMMessage_sensor_status_tag             4
#define SEMMessage_bool_sensor_status_tag        5
#define SEMMessage_motor_status_tag              6
#define SEMMessage_solenoid_status_tag           7
#define SEMMessage_xy_motor_status_tag           8
#define SEMMessage_configuration_reply_tag       9
#define SEMMessage_command_reply_tag             10
#define SEMMessage_device_id_tag                 1
#define SEMConfig_sem_tag                        2
#define SEMConfig_motor_stepper_tag              3
#define SEMConfig_motor_xy_tag                   4
#define SEMConfig_solenoid_tag                   5
#define SEMConfig_pwm_tag                        6
#define SEMConfig_sensor_analog_tag              7
#define SEMConfig_sensor_bool_tag                8
#define SEMConfig_address_tag                    1
#define SEMOneOfMessage_sem_config_tag           2
#define SEMOneOfMessage_sem_command_tag          3
#define SEMOneOfMessage_sem_message_tag          4
#define SEMOneOfMessage_sequence_id_tag          1

/* Struct field encoding specification for nanopb */
extern const pb_field_t SEMValue_fields[2];
extern const pb_field_t SEMXYValue_fields[3];
extern const pb_field_t SEMCrc_fields[2];
extern const pb_field_t SEMCommand_fields[5];
extern const pb_field_t SEMMessageStatus_fields[5];
extern const pb_field_t SEMMessageSensor_fields[7];
extern const pb_field_t SEMMessageSensorBool_fields[6];
extern const pb_field_t SEMMessageMotor_fields[8];
extern const pb_field_t SEMMessageSolenoid_fields[4];
extern const pb_field_t SEMMessageXYMotor_fields[6];
extern const pb_field_t SEMMessageConfigurationStatusReply_fields[3];
extern const pb_field_t SEMMessageCommandStatusReply_fields[3];
extern const pb_field_t SEMMessage_fields[10];
extern const pb_field_t SEMConfig_fields[9];
extern const pb_field_t SEMDeviceAddress_fields[6];
extern const pb_field_t SEMStepUnitConversion_fields[3];
extern const pb_field_t SEMLinearUnitConversion_fields[6];
extern const pb_field_t SEMThresholds_fields[5];
extern const pb_field_t SEMConfigSEM_fields[7];
extern const pb_field_t SEMConfigStepperMotor_fields[18];
extern const pb_field_t SEMConfigVirtualXYMotors_fields[3];
extern const pb_field_t SEMConfigSolenoid_fields[4];
extern const pb_field_t SEMConfigPWM_fields[4];
extern const pb_field_t SEMConfigSensorAnalog_fields[5];
extern const pb_field_t SEMConfigSensorBool_fields[5];
extern const pb_field_t SEMOneOfMessage_fields[5];

/* Maximum encoded size of messages (where known) */
#define SEMValue_size                            5
#define SEMXYValue_size                          10
#define SEMCrc_size                              11
#define SEMCommand_size                          57
#define SEMMessageStatus_size                    67
#define SEMMessageSensor_size                    83
#define SEMMessageSensorBool_size                78
#define SEMMessageMotor_size                     70
#define SEMMessageSolenoid_size                  56
#define SEMMessageXYMotor_size                   66
#define SEMMessageConfigurationStatusReply_size  45
#define SEMMessageCommandStatusReply_size        45
#define SEMMessage_size                          119
/* SEMConfig_size depends on runtime parameters */
#define SEMDeviceAddress_size                    101
#define SEMStepUnitConversion_size               16
#define SEMLinearUnitConversion_size             31
#define SEMThresholds_size                       20
/* SEMConfigSEM_size depends on runtime parameters */
#define SEMConfigStepperMotor_size               199
#define SEMConfigVirtualXYMotors_size            68
#define SEMConfigSolenoid_size                   15
#define SEMConfigPWM_size                        43
#define SEMConfigSensorAnalog_size               100
#define SEMConfigSensorBool_size                 49
/* SEMOneOfMessage_size depends on runtime parameters */

/* Message IDs (where set with "msgid" option) */
#ifdef PB_MSGID

#define KF_MESSAGES \


#endif

#ifdef __cplusplus
} /* extern "C" */
#endif
/* @@protoc_insertion_point(eof) */

#endif
